using Mirror;
using UnityEngine;

namespace FirstGearGames.Mirrors.InteractingSceneObjects
{
    

    public class Interactor : NetworkBehaviour
    {
       
        private void Update()
        {

            ClientUpdate();
        }

        private void ClientUpdate()
        {
            if (base.isServer && !base.isClient)
                return;
            if (!base.hasAuthority)
                return;

            if (Input.GetKeyDown(KeyCode.Mouse0))
            {

                TryInteract();

            }

        }
        /// <summary>
        /// Try to interact with nearby usables.
        /// </summary>
        private void TryInteract()
        {

            RaycastHit[]
                hits = Physics.RaycastAll(Camera.main.transform.position, Camera.main.transform.forward, 500f);
            Debug.Log("ifoundtheHit"+ hits.Length);

            for (int i = 0; i < hits.Length; i++)
            {

                /* Look for network usable interface on the object.
                 * If found then call CmdUse passing in the objects
                 * NetworkIdentity component. */
                INetworkUsable[] usables1 = hits[i].transform.GetComponents<INetworkUsable>();

                foreach (INetworkUsable usable in usables1)
                {

                  if (usable != null)
                {
                /* Only use locally if not a client host. This is to prevent
                 * the isServer check from firing twice on Use. */
                  if (!base.isServer)
                    usable.Use();
                CmdUse(usable.GetNetworkIdentity(), usable.GetId());
                }
                }
                Debug.Log("whatIcanInteractWith" + usables1);

            }

        }

        /// <summary>
        /// Uses the INetworkUsable on the NetworkIdentity passed in.
        /// </summary>
        /// <param name="netIdent"></param>
        [Command]
        private void CmdUse(NetworkIdentity netIdent, int id)
        {
            INetworkUsable[] usables = netIdent.gameObject.GetComponents<INetworkUsable>();
            for (int i = 0; i < usables.Length; i++)
            {
                if (usables[i].GetId() == id)
                    usables[i].Use();
            }
        }
    }


}
